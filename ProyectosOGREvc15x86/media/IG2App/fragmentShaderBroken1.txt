#version 330 core

//Cosas de texturas y colores
uniform sampler2D textura1; // tipo sampler2D para texturas 2D
uniform vec4 InColor;
uniform vec4 OutColor;

//Cosas de la luz
uniform vec3 lightDir;
uniform vec3 diffuseLight;

in vec2 vUv0; // out del vertex shader
in vec3 Normal;

out vec4 FragColor; // out del fragment shader

void main() {

    vec3 bujeros1 = vec3(texture(textura1, vUv0));
    if (bujeros1.r > 0.5)
    {
        discard;
    }
    else
    {
        vec3 norm = normalize(Normal); 
        vec3 normLight = normalize(lightDir);

        if(gl_FrontFacing)
        {
            float diff = max(dot(norm, normLight), 0.0);
            vec3 diffuse = diffuseLight * diff * vec3(OutColor);
            FragColor = vec4(diffuse, 1.0);
        }
        else
        {
            float diff = max(dot(-norm, normLight), 0.0);
            vec3 diffuse = diffuseLight * diff * vec3(InColor);
            FragColor = vec4(diffuse, 1.0);
        }
    }
}